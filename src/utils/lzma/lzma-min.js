//! Â© 2015 Nathan Rugg <nmrugg@gmail.com> | MIT
typeof Worker === 'undefined' || typeof location !== 'undefined' && location.protocol === 'file:' ? typeof global !== 'undefined' && typeof require !== 'undefined' ? this.LZMA = function (n) { return require(n || './lzma_worker.js').LZMA; } : typeof window !== 'undefined' && window.document ? !(function () { function n(n) { let e; return r(n), e = { compress(n, r, t, i) { o.LZMA_WORKER ? o.LZMA_WORKER.compress(n, r, t, i) : setTimeout(() => { e.compress(n, r, t, i); }, 50); }, decompress(n, r, t) { o.LZMA_WORKER ? o.LZMA_WORKER.decompress(n, r, t) : setTimeout(() => { e.decompress(n, r, t); }, 50); }, worker() { return null; } }; } let o; const e = this; var r = function (o) { const r = document.createElement('script'); r.type = 'text/javascript', r.src = o, r.onload = function () { e.LZMA = n; }, document.getElementsByTagName('head')[0].appendChild(r); }; typeof window !== 'undefined' ? o = window : global && (o = global), e.LZMA = n; }()) : console.error("Can't load the worker. Sorry.") : this.LZMA = function (n) { const o = 1; const e = 2; const r = 3; const t = {}; const i = new Worker(n || './lzma_worker-min.js'); return i.onmessage = function (n) { n.data.action === r ? t[n.data.cbn] && typeof t[n.data.cbn].on_progress === 'function' && t[n.data.cbn].on_progress(n.data.result) : t[n.data.cbn] && typeof t[n.data.cbn].on_finish === 'function' && (t[n.data.cbn].on_finish(n.data.result, n.data.error), delete t[n.data.cbn]); }, i.onerror = function (n) { const o = Error(n.message + ' (' + n.filename + ':' + n.lineno + ')'); for (const e in t)t[e].on_finish(null, o); console.error('Uncaught error in lzma_worker', o); }, (function () { function n(n, o, e, r, a) { let c; do c = Math.floor(1e7 * Math.random()); while (void 0 !== t[c]);t[c] = { on_finish: r, on_progress: a }, i.postMessage({ action: n, cbn: c, data: o, mode: e }); } return { compress(e, r, t, i) { n(o, e, r, t, i); }, decompress(o, r, t) { n(e, o, !1, r, t); }, worker() { return i; } }; }()); };
